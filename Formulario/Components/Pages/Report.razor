@page "/sales-report"
@rendermode InteractiveServer
@inject HttpClient Http
@inject ILogger<Report> Logger
@inject IJSRuntime JS

<PageTitle>Sales Report</PageTitle>

<h1>Sales Report</h1>

<div>
    <label for="startDate">Fecha de inicio:</label>
    <input type="date" @bind="startDate" id="startDate" />

    <label for="endDate">Fecha de fin:</label>
    <input type="date" @bind="endDate" id="endDate" />
    <button class="btn btn-primary" @onclick="GetSalesReport">Click me</button>

    <label for="email">Correos Electrónico:</label>
    <input type="text" @bind="emailAddresses" id="email" />

    <button class="btn btn-primary" @onclick="SendSalesReportByEmail">Enviar PDF por Correo</button>
</div>

@if (ventas == null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nombre del Cliente</th>
                <th>Fecha de Venta</th>
                <th>Monto Total</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var venta in ventas)
            {
                <tr>
                    <td>@venta.CustomerName</td>
                    <td>@venta.SaleDate.ToShortDateString()</td>
                    <td>@venta.TotalAmount</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Sale>? ventas;
    private DateTime startDate = DateTime.Now.AddMonths(-1); // Fecha de inicio por defecto (un mes atrás)
    private DateTime endDate = DateTime.Now; // Fecha de fin por defecto (hoy)
    private string emailAddresses = string.Empty; // Correos electrónicos separados por coma

    // Método para obtener el reporte de ventas
    private async Task GetSalesReport()
    {
        try
        {
            await JS.InvokeVoidAsync("console.log", "¡Botón reporte!");

            var startDateString = startDate.ToString("yyyy-MM-dd");
            var endDateString = endDate.ToString("yyyy-MM-dd");

            var response = await Http.GetFromJsonAsync<List<Sale>>($"http://localhost:5000/api/sale/report?startDate={startDateString}&endDate={endDateString}");
            if (response != null)
            {
                ventas = response;
                Console.WriteLine("Reporte recibido con éxito.");
            }
            else
            {
                Console.WriteLine("No se recibió respuesta de la API.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al obtener los datos: {ex.Message}");
        }
    }

    private class Sale
    {
        public string CustomerName { get; set; }
        public DateTime SaleDate { get; set; }
        public decimal TotalAmount { get; set; }
    }

    private async Task SendSalesReportByEmail()
    {
        if (string.IsNullOrWhiteSpace(emailAddresses))
        {
            Console.WriteLine("Por favor, ingresa al menos un correo.");
            return;
        }

        try
        {
            // Divide la cadena de correos en una lista separada por comas
            var emailList = emailAddresses.Split(',', StringSplitOptions.RemoveEmptyEntries)
                                           .Select(e => e.Trim())
                                           .ToList();

            if (!emailList.Any())
            {
                Console.WriteLine("Por favor, ingresa correos electrónicos válidos.");
                return;
            }

            var startDateString = startDate.ToString("yyyy-MM-dd");
            var endDateString = endDate.ToString("yyyy-MM-dd");

            // Escapa las direcciones de los correos para que sean seguras en la URL
            var emailsEncoded = Uri.EscapeDataString(string.Join(",", emailList));

            // Construye la URL con los parámetros
            var url = $"http://localhost:5000/api/sale/send-pdf-report?startDate={startDateString}&endDate={endDateString}&emails={emailsEncoded}";

            var response = await Http.PostAsync(url, null); // No es necesario enviar contenido en el cuerpo

            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("console.log", response);
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync($"Error al enviar el reporte. Código de estado: {response.StatusCode}, Detalles: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync($"Error: {ex.Message}");
        }
    }
}
